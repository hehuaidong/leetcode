{"title": "748. 最短完整词", "level": "简单", "description": "<p>如果单词列表（<code>words</code>）中的一个单词包含牌照（<code>licensePlate</code>）中所有的字母，那么我们称之为完整词。在所有完整词中，最短的单词我们称之为最短完整词。</p>\n\n<p>单词在匹配牌照中的字母时不区分大小写，比如牌照中的&nbsp;<code>\"P\"</code>&nbsp;依然可以匹配单词中的&nbsp;<code>\"p\"</code>&nbsp;字母。</p>\n\n<p>我们保证一定存在一个最短完整词。当有多个单词都符合最短完整词的匹配条件时取单词列表中最靠前的一个。</p>\n\n<p>牌照中可能包含多个相同的字符，比如说：对于牌照 <code>\"PP\"</code>，单词&nbsp;<code>\"pair\"</code>&nbsp;无法匹配，但是&nbsp;<code>\"supper\"</code>&nbsp;可以匹配。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>licensePlate = \"1s3 PSt\", words = [\"step\", \"steps\", \"stripe\", \"stepple\"]\n<strong>输出：</strong>\"steps\"\n<strong>说明：</strong>最短完整词应该包括 \"s\"、\"p\"、\"s\" 以及 \"t\"。对于 \"step\" 它只包含一个 \"s\" 所以它不符合条件。同时在匹配过程中我们忽略牌照中的大小写。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>licensePlate = \"1s3 456\", words = [\"looks\", \"pest\", \"stew\", \"show\"]\n<strong>输出：</strong>\"pest\"\n<strong>说明：</strong>存在 3 个包含字母 \"s\" 且有着最短长度的完整词，但我们返回最先出现的完整词。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>牌照<code>（licensePlate）</code>的长度在区域<code>[1, 7]</code>中。</li>\n\t<li>牌照<code>（licensePlate）</code>将会包含数字、空格、或者字母（大写和小写）。</li>\n\t<li>单词列表<code>（words）</code>长度在区间&nbsp;<code>[10, 1000]</code>&nbsp;中。</li>\n\t<li>每一个单词&nbsp;<code>words[i]</code>&nbsp;都是小写，并且长度在区间&nbsp;<code>[1, 15]</code>&nbsp;中。</li>\n</ol>\n\n<p>&nbsp;</p>\n", "code": "class Solution {\npublic:\n    string shortestCompletingWord(string licensePlate, vector<string>& words) {\n            }\n};"}