{"title": "1334. 阈值距离内邻居最少的城市", "level": "中等", "description": "<p>有 <code>n</code>&nbsp;个城市，按从 <code>0</code> 到 <code>n-1</code>&nbsp;编号。给你一个边数组&nbsp;<code>edges</code>，其中 <code>edges[i] = [from<sub>i</sub>, to<sub>i</sub>, weight<sub>i</sub>]</code>&nbsp;代表&nbsp;<code>from<sub>i</sub></code>&nbsp;和&nbsp;<code>to<sub>i</sub></code><sub>&nbsp;</sub>两个城市之间的双向加权边，距离阈值是一个整数&nbsp;<code>distanceThreshold</code>。</p>\n\n<p>返回能通过某些路径到达其他城市数目最少、且路径距离 <strong>最大</strong> 为&nbsp;<code>distanceThreshold</code>&nbsp;的城市。如果有多个这样的城市，则返回编号最大的城市。</p>\n\n<p>注意，连接城市 <em><strong>i</strong></em> 和 <em><strong>j</strong></em> 的路径的距离等于沿该路径的所有边的权重之和。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img style=\"height: 225px; width: 300px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/26/find_the_city_01.png\" alt=\"\"></p>\n\n<pre><strong>输入：</strong>n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4\n<strong>输出：</strong>3\n<strong>解释：</strong>城市分布图如上。\n每个城市阈值距离 distanceThreshold = 4 内的邻居城市分别是：\n城市 0 -&gt; [城市 1, 城市 2]&nbsp;\n城市 1 -&gt; [城市 0, 城市 2, 城市 3]&nbsp;\n城市 2 -&gt; [城市 0, 城市 1, 城市 3]&nbsp;\n城市 3 -&gt; [城市 1, 城市 2]&nbsp;\n城市 0 和 3 在阈值距离 4 以内都有 2 个邻居城市，但是我们必须返回城市 3，因为它的编号最大。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><strong><img style=\"height: 225px; width: 300px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/26/find_the_city_02.png\" alt=\"\"></strong></p>\n\n<pre><strong>输入：</strong>n = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distanceThreshold = 2\n<strong>输出：</strong>0\n<strong>解释：</strong>城市分布图如上。&nbsp;\n每个城市阈值距离 distanceThreshold = 2 内的邻居城市分别是：\n城市 0 -&gt; [城市 1]&nbsp;\n城市 1 -&gt; [城市 0, 城市 4]&nbsp;\n城市 2 -&gt; [城市 3, 城市 4]&nbsp;\n城市 3 -&gt; [城市 2, 城市 4]\n城市 4 -&gt; [城市 1, 城市 2, 城市 3]&nbsp;\n城市 0 在阈值距离 4 以内只有 1 个邻居城市。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 100</code></li>\n\t<li><code>1 &lt;= edges.length &lt;= n * (n - 1) / 2</code></li>\n\t<li><code>edges[i].length == 3</code></li>\n\t<li><code>0 &lt;= from<sub>i</sub> &lt; to<sub>i</sub> &lt; n</code></li>\n\t<li><code>1 &lt;= weight<sub>i</sub>,&nbsp;distanceThreshold &lt;= 10^4</code></li>\n\t<li>所有 <code>(from<sub>i</sub>, to<sub>i</sub>)</code>&nbsp;都是不同的。</li>\n</ul>\n", "code": "class Solution {\npublic:\n    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {\n            }\n};"}