{"title": "622. 设计循环队列", "level": "中等", "description": "<p>设计你的循环队列实现。 循环队列是一种线性数据结构，其操作表现基于 FIFO（先进先出）原则并且队尾被连接在队首之后以形成一个循环。它也被称为“环形缓冲器”。</p>\n\n<p>循环队列的一个好处是我们可以利用这个队列之前用过的空间。在一个普通队列里，一旦一个队列满了，我们就不能插入下一个元素，即使在队列前面仍有空间。但是使用循环队列，我们能使用这些空间去存储新的值。</p>\n\n<p>你的实现应该支持如下操作：</p>\n\n<ul>\n\t<li><code>MyCircularQueue(k)</code>: 构造器，设置队列长度为 k 。</li>\n\t<li><code>Front</code>: 从队首获取元素。如果队列为空，返回 -1 。</li>\n\t<li><code>Rear</code>: 获取队尾元素。如果队列为空，返回 -1 。</li>\n\t<li><code>enQueue(value)</code>: 向循环队列插入一个元素。如果成功插入则返回真。</li>\n\t<li><code>deQueue()</code>: 从循环队列中删除一个元素。如果成功删除则返回真。</li>\n\t<li><code>isEmpty()</code>: 检查循环队列是否为空。</li>\n\t<li><code>isFull()</code>: 检查循环队列是否已满。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>MyCircularQueue circularQueue = new MycircularQueue(3); // 设置长度为 3\n\ncircularQueue.enQueue(1); &nbsp;// 返回 true\n\ncircularQueue.enQueue(2); &nbsp;// 返回 true\n\ncircularQueue.enQueue(3); &nbsp;// 返回 true\n\ncircularQueue.enQueue(4); &nbsp;// 返回 false，队列已满\n\ncircularQueue.Rear(); &nbsp;// 返回 3\n\ncircularQueue.isFull(); &nbsp;// 返回 true\n\ncircularQueue.deQueue(); &nbsp;// 返回 true\n\ncircularQueue.enQueue(4); &nbsp;// 返回 true\n\ncircularQueue.Rear(); &nbsp;// 返回 4\n&nbsp;</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>所有的值都在 0&nbsp;至 1000 的范围内；</li>\n\t<li>操作数将在 1 至 1000 的范围内；</li>\n\t<li>请不要使用内置的队列库。</li>\n</ul>\n", "code": "class MyCircularQueue {\npublic:\n    /** Initialize your data structure here. Set the size of the queue to be k. \n*/\n    MyCircularQueue(int k) {\n            }\n        /** Insert an element into the circular queue. Return true if the operation \nis successful. */\n    bool enQueue(int value) {\n            }\n        /** Delete an element from the circular queue. Return true if the operation \nis successful. */\n    bool deQueue() {\n            }\n        /** Get the front item from the queue. */\n    int Front() {\n        "}