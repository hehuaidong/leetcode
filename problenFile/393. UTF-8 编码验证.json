{"title": "393. UTF-8 编码验证", "level": "中等", "description": "<p>UTF-8 中的一个字符可能的长度为 <strong>1 到 4 字节</strong>，遵循以下的规则：</p>\n\n<ol>\n\t<li>对于 1 字节的字符，字节的第一位设为0，后面7位为这个符号的unicode码。</li>\n\t<li>对于 n 字节的字符 (n &gt; 1)，第一个字节的前 n 位都设为1，第 n+1 位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。</li>\n</ol>\n\n<p>这是 UTF-8 编码的工作方式：</p>\n\n<pre><code>   Char. number range  |        UTF-8 octet sequence\n      (hexadecimal)    |              (binary)\n   --------------------+---------------------------------------------\n   0000 0000-0000 007F | 0xxxxxxx\n   0000 0080-0000 07FF | 110xxxxx 10xxxxxx\n   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx\n   0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n</code></pre>\n\n<p>给定一个表示数据的整数数组，返回它是否为有效的 utf-8 编码。</p>\n\n<p><strong>注意:</strong><br>\n输入是整数数组。只有每个整数的<strong>最低 8 个有效位</strong>用来存储数据。这意味着每个整数只表示 1 字节的数据。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>data = [197, 130, 1], 表示 8 位的序列: <strong>11000101 10000010 00000001</strong>.\n\n返回 <strong>true </strong>。\n这是有效的 utf-8 编码，为一个2字节字符，跟着一个1字节字符。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>data = [235, 140, 4], 表示 8 位的序列: <strong>11101011 10001100 00000100</strong>.\n\n返回<strong> false</strong> 。\n前 3 位都是 1 ，第 4 位为 0 表示它是一个3字节字符。\n下一个字节是开头为 10 的延续字节，这是正确的。\n但第二个延续字节不以 10 开头，所以是不符合规则的。\n</pre>\n", "code": "class Solution {\npublic:\n    bool validUtf8(vector<int>& data) {\n            }\n};"}