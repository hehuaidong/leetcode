{"title": "745. 前缀和后缀搜索", "level": "困难", "description": "<p>给定多个&nbsp;<code>words</code>，<code>words[i]</code>&nbsp;的权重为&nbsp;<code>i</code>&nbsp;。</p>\n\n<p>设计一个类&nbsp;<code>WordFilter</code>&nbsp;实现函数<code>WordFilter.f(String prefix, String suffix)</code>。这个函数将返回具有前缀&nbsp;<code>prefix</code>&nbsp;和后缀<code>suffix</code>&nbsp;的词的最大权重。如果没有这样的词，返回 -1。</p>\n\n<p><strong>例子:</strong></p>\n\n<pre><strong>输入:</strong>\nWordFilter([\"apple\"])\nWordFilter.f(\"a\", \"e\") // 返回 0\nWordFilter.f(\"b\", \"\") // 返回 -1\n</pre>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li><code>words</code>的长度在<code>[1, 15000]</code>之间。</li>\n\t<li>对于每个测试用例，最多会有<code>words.length</code>次对<code>WordFilter.f</code>的调用。</li>\n\t<li><code>words[i]</code>的长度在<code>[1, 10]</code>之间。</li>\n\t<li><code>prefix, suffix</code>的长度在<code>[0, 10]</code>之前。</li>\n\t<li><code>words[i]</code>和<code>prefix, suffix</code>只包含小写字母。</li>\n</ol>\n", "code": "class WordFilter {\npublic:\n    WordFilter(vector<string>& words) {\n            }\n        int f(string prefix, string suffix) {\n            }\n};\n /**\n * Your WordFilter object will be instantiated and called as such:\n * WordFilter* obj = new WordFilter(words);\n * int param_1 = obj->f(prefix,suffix);\n */"}