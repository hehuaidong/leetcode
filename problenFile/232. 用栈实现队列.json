{"title": "232. 用栈实现队列", "level": "简单", "description": "<p>使用栈实现队列的下列操作：</p>\n\n<ul>\n\t<li>push(x) -- 将一个元素放入队列的尾部。</li>\n\t<li>pop() -- 从队列首部移除元素。</li>\n\t<li>peek() -- 返回队列首部的元素。</li>\n\t<li>empty() -- 返回队列是否为空。</li>\n</ul>\n\n<p><strong>示例:</strong></p>\n\n<pre>MyQueue queue = new MyQueue();\n\nqueue.push(1);\nqueue.push(2);  \nqueue.peek();  // 返回 1\nqueue.pop();   // 返回 1\nqueue.empty(); // 返回 false</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>你只能使用标准的栈操作 -- 也就是只有&nbsp;<code>push to top</code>,&nbsp;<code>peek/pop from top</code>,&nbsp;<code>size</code>, 和&nbsp;<code>is empty</code>&nbsp;操作是合法的。</li>\n\t<li>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</li>\n\t<li>假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）。</li>\n</ul>\n", "code": "class MyQueue {\npublic:\n    /** Initialize your data structure here. */\n    MyQueue() {\n            }\n        /** Push element x to the back of queue. */\n    void push(int x) {\n            }\n        /** Removes the element from in front of queue and returns that element. */\n    int pop() {\n            }\n        /** Get the front element. */\n    int peek() {\n            }\n        /** Returns whether the queue is empty. */"}