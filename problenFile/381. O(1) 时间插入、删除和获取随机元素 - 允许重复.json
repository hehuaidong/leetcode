{"title": "381. O(1) 时间插入、删除和获取随机元素 - 允许重复", "level": "困难", "description": "<p>设计一个支持在<em>平均&nbsp;</em>时间复杂度&nbsp;<strong>O(1)&nbsp;</strong>下<strong>，&nbsp;</strong>执行以下操作的数据结构。</p>\n\n<p><strong>注意: 允许出现重复元素。</strong></p>\n\n<ol>\n\t<li><code>insert(val)</code>：向集合中插入元素 val。</li>\n\t<li><code>remove(val)</code>：当 val 存在时，从集合中移除一个 val。</li>\n\t<li><code>getRandom</code>：从现有集合中随机获取一个元素。每个元素被返回的概率应该与其在集合中的数量呈线性相关。</li>\n</ol>\n\n<p><strong>示例:</strong></p>\n\n<pre>// 初始化一个空的集合。\nRandomizedCollection collection = new RandomizedCollection();\n\n// 向集合中插入 1 。返回 true 表示集合不包含 1 。\ncollection.insert(1);\n\n// 向集合中插入另一个 1 。返回 false 表示集合包含 1 。集合现在包含 [1,1] 。\ncollection.insert(1);\n\n// 向集合中插入 2 ，返回 true 。集合现在包含 [1,1,2] 。\ncollection.insert(2);\n\n// getRandom 应当有 2/3 的概率返回 1 ，1/3 的概率返回 2 。\ncollection.getRandom();\n\n// 从集合中删除 1 ，返回 true 。集合现在包含 [1,2] 。\ncollection.remove(1);\n\n// getRandom 应有相同概率返回 1 和 2 。\ncollection.getRandom();\n</pre>\n", "code": "class RandomizedCollection {\npublic:\n    /** Initialize your data structure here. */\n    RandomizedCollection() {\n            }\n        /** Inserts a value to the collection. Returns true if the collection did \nnot already contain the specified element. */\n    bool insert(int val) {\n            }\n        /** Removes a value from the collection. Returns true if the collection \ncontained the specified element. */\n    bool remove(int val) {\n            }\n        /** Get a random element from the collection. */\n    int getRandom() {\n            }"}