{"title": "284. 顶端迭代器", "level": "中等", "description": "<p>给定一个迭代器类的接口，接口包含两个方法：&nbsp;<code>next()</code>&nbsp;和&nbsp;<code>hasNext()</code>。设计并实现一个支持&nbsp;<code>peek()</code>&nbsp;操作的顶端迭代器 -- 其本质就是把原本应由&nbsp;<code>next()</code>&nbsp;方法返回的元素&nbsp;<code>peek()</code>&nbsp;出来。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>假设迭代器被初始化为列表&nbsp;<strong><code>[1,2,3]</code></strong>。\n\n调用&nbsp;<strong><code>next() </code></strong>返回 <strong>1</strong>，得到列表中的第一个元素。\n现在调用&nbsp;<strong><code>peek()</code></strong>&nbsp;返回 <strong>2</strong>，下一个元素。在此之后调用&nbsp;<strong><code>next() </code></strong>仍然返回 <strong>2</strong>。\n最后一次调用&nbsp;<strong><code>next()</code></strong>&nbsp;返回 <strong>3</strong>，末尾元素。在此之后调用&nbsp;<strong><code>hasNext()</code></strong>&nbsp;应该返回 <strong>false</strong>。\n</pre>\n\n<p><strong>进阶：</strong>你将如何拓展你的设计？使之变得通用化，从而适应所有的类型，而不只是整数型？</p>\n", "code": "// Below is the interface for Iterator, which is already defined for you.\n// **DO NOT** modify the interface for Iterator.\n class Iterator {\n    struct Data;\n    Data* data;\npublic:\n    Iterator(const vector<int>& nums);\n    Iterator(const Iterator& iter);\n    virtual ~Iterator();\n    // Returns the next element in the iteration.\n    int next();\n    // Returns true if the iteration has more elements.\n    bool hasNext() const;\n};\n  class PeekingIterator : public Iterator {\npublic:\n    PeekingIterator(const vector<int>& nums) : Iterator(nums) {\n        // Initialize any member here.\n        // **DO NOT** save a copy of nums and manipulate it directly.\n        // You should only use the Iterator interface methods."}