{"title": "671. 二叉树中第二小的节点", "level": "简单", "description": "<p>给定一个非空特殊的二叉树，每个节点都是正数，并且每个节点的子节点数量只能为&nbsp;<code>2</code>&nbsp;或&nbsp;<code>0</code>。如果一个节点有两个子节点的话，那么这个节点的值不大于它的子节点的值。&nbsp;</p>\n\n<p>给出这样的一个二叉树，你需要输出所有节点中的<strong>第二小的值。</strong>如果第二小的值不存在的话，输出 -1 <strong>。</strong></p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> \n    2\n   / \\\n  2   5\n     / \\\n    5   7\n\n<strong>输出:</strong> 5\n<strong>说明:</strong> 最小的值是 2 ，第二小的值是 5 。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> \n    2\n   / \\\n  2   2\n\n<strong>输出:</strong> -1\n<strong>说明:</strong> 最小的值是 2, 但是不存在第二小的值。\n</pre>\n", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int findSecondMinimumValue(TreeNode* root) {\n            }\n};"}