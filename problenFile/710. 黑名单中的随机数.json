{"title": "710. 黑名单中的随机数", "level": "困难", "description": "<p>给定一个包含 [0，n ) 中独特的整数的黑名单 B，写一个函数从 [ 0，n ) 中返回一个<strong>不在</strong> B 中的随机整数。</p>\n\n<p>对它进行优化使其尽量少调用系统方法 <code>Math.random()</code> 。</p>\n\n<p><strong>提示:</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N &lt;= 1000000000</code></li>\n\t<li><code>0 &lt;= B.length &lt; min(100000, N)</code></li>\n\t<li><code>[0, N)</code>&nbsp;不包含&nbsp;N，详细参见&nbsp;<a href=\"https://en.wikipedia.org/wiki/Interval_(mathematics)\">interval notation</a>&nbsp;。</li>\n</ol>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入: \n</strong>[\"Solution\",\"pick\",\"pick\",\"pick\"]\n[[1,[]],[],[],[]]\n<strong>输出: </strong>[null,0,0,0]\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入: \n</strong>[\"Solution\",\"pick\",\"pick\",\"pick\"]\n[[2,[]],[],[],[]]\n<strong>输出: </strong>[null,1,1,1]\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre><strong>输入: \n</strong>[\"Solution\",\"pick\",\"pick\",\"pick\"]\n[[3,[1]],[],[],[]]\n<strong>Output: </strong>[null,0,0,2]\n</pre>\n\n<p><strong>示例 4:</strong></p>\n\n<pre><strong>输入: \n</strong>[\"Solution\",\"pick\",\"pick\",\"pick\"]\n[[4,[2]],[],[],[]]\n<strong>输出: </strong>[null,1,3,1]\n</pre>\n\n<p><strong>输入语法说明：</strong></p>\n\n<p>输入是两个列表：调用成员函数名和调用的参数。<code>Solution</code>的构造函数有两个参数，<code>N</code>&nbsp;和黑名单&nbsp;<code>B</code>。<code>pick</code>&nbsp;没有参数，输入参数是一个列表，即使参数为空，也会输入一个 [] 空列表。</p>\n", "code": "class Solution {\npublic:\n    Solution(int N, vector<int>& blacklist) {\n            }\n        int pick() {\n            }\n};\n /**\n * Your Solution object will be instantiated and called as such:\n * Solution* obj = new Solution(N, blacklist);\n * int param_1 = obj->pick();\n */"}