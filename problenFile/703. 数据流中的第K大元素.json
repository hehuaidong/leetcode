{"title": "703. 数据流中的第K大元素", "level": "简单", "description": "<p>设计一个找到数据流中第K大元素的类（class）。注意是排序后的第K大元素，不是第K个不同的元素。</p>\n\n<p>你的&nbsp;<code>KthLargest</code>&nbsp;类需要一个同时接收整数&nbsp;<code>k</code> 和整数数组<code>nums</code>&nbsp;的构造器，它包含数据流中的初始元素。每次调用&nbsp;<code>KthLargest.add</code>，返回当前数据流中第K大的元素。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>int k = 3;\nint[] arr = [4,5,8,2];\nKthLargest kthLargest = new KthLargest(3, arr);\nkthLargest.add(3);&nbsp; &nbsp;// returns 4\nkthLargest.add(5);&nbsp; &nbsp;// returns 5\nkthLargest.add(10);&nbsp; // returns 5\nkthLargest.add(9);&nbsp; &nbsp;// returns 8\nkthLargest.add(4);&nbsp; &nbsp;// returns 8\n</pre>\n\n<p><strong>说明: </strong><br>\n你可以假设&nbsp;<code>nums</code>&nbsp;的长度≥&nbsp;<code>k-1</code>&nbsp;且<code>k</code> ≥&nbsp;1。</p>\n", "code": "class KthLargest {\npublic:\n    KthLargest(int k, vector<int>& nums) {\n            }\n        int add(int val) {\n            }\n};\n /**\n * Your KthLargest object will be instantiated and called as such:\n * KthLargest* obj = new KthLargest(k, nums);\n * int param_1 = obj->add(val);\n */"}