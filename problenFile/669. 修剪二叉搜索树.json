{"title": "669. 修剪二叉搜索树", "level": "简单", "description": "<p>给定一个二叉搜索树，同时给定最小边界<code>L</code>&nbsp;和最大边界&nbsp;<code>R</code>。通过修剪二叉搜索树，使得所有节点的值在<code>[L, R]</code>中 (R&gt;=L) 。你可能需要改变树的根节点，所以结果应当返回修剪好的二叉搜索树的新的根节点。</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><strong>输入:</strong> \n    1\n   / \\\n  0   2\n\n  L = 1\n  R = 2\n\n<strong>输出:</strong> \n    1\n      \\\n       2\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><strong>输入:</strong> \n    3\n   / \\\n  0   4\n   \\\n    2\n   /\n  1\n\n  L = 1\n  R = 3\n\n<strong>输出:</strong> \n      3\n     / \n   2   \n  /\n 1\n</pre>\n", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* trimBST(TreeNode* root, int L, int R) {\n            }\n};"}