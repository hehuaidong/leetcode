{"title": "558. 四叉树交集", "level": "简单", "description": "<p>四叉树是一种树数据，其中每个结点恰好有四个子结点：<code>topLeft</code>、<code>topRight</code>、<code>bottomLeft</code>&nbsp;和&nbsp;<code>bottomRight</code>。四叉树通常被用来划分一个二维空间，递归地将其细分为四个象限或区域。</p>\n\n<p>我们希望在四叉树中存储 True/False 信息。四叉树用来表示 <code>N * N</code> 的布尔网格。对于每个结点, 它将被等分成四个孩子结点<strong>直到这个区域内的值都是相同的</strong>。每个节点都有另外两个布尔属性：<code>isLeaf</code>&nbsp;和&nbsp;<code>val</code>。当这个节点是一个叶子结点时&nbsp;<code>isLeaf</code>&nbsp;为真。<code>val</code>&nbsp;变量储存叶子结点所代表的区域的值。</p>\n\n<p>例如，下面是两个四叉树 A 和 B：</p>\n\n<pre>A:\n+-------+-------+   T: true\n|       |       |   F: false\n|   T   |   T   |\n|       |       |\n+-------+-------+\n|       |       |\n|   F   |   F   |\n|       |       |\n+-------+-------+\ntopLeft: T\ntopRight: T\nbottomLeft: F\nbottomRight: F\n\nB:               \n+-------+---+---+\n|       | F | F |\n|   T   +---+---+\n|       | T | T |\n+-------+---+---+\n|       |       |\n|   T   |   F   |\n|       |       |\n+-------+-------+\ntopLeft: T\ntopRight:\n     topLeft: F\n     topRight: F\n     bottomLeft: T\n     bottomRight: T\nbottomLeft: T\nbottomRight: F\n</pre>\n\n<p>&nbsp;</p>\n\n<p>你的任务是实现一个函数，该函数根据两个四叉树返回表示这两个四叉树的逻辑或(或并)的四叉树。</p>\n\n<pre>A:                 B:                 C (A or B):\n+-------+-------+  +-------+---+---+  +-------+-------+\n|       |       |  |       | F | F |  |       |       |\n|   T   |   T   |  |   T   +---+---+  |   T   |   T   |\n|       |       |  |       | T | T |  |       |       |\n+-------+-------+  +-------+---+---+  +-------+-------+\n|       |       |  |       |       |  |       |       |\n|   F   |   F   |  |   T   |   F   |  |   T   |   F   |\n|       |       |  |       |       |  |       |       |\n+-------+-------+  +-------+-------+  +-------+-------+\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>A</code>&nbsp;和&nbsp;<code>B</code>&nbsp;都表示大小为&nbsp;<code>N * N</code>&nbsp;的网格。</li>\n\t<li><code>N</code>&nbsp;将确保是 2 的整次幂。</li>\n\t<li>如果你想了解更多关于四叉树的知识，你可以参考这个&nbsp;<a href=\"https://en.wikipedia.org/wiki/Quadtree\">wiki</a>&nbsp;页面。</li>\n\t<li>逻辑或的定义如下：如果&nbsp;<code>A 为 True</code> ，或者&nbsp;<code>B 为 True</code> ，或者&nbsp;<code>A 和 B 都为 True</code>，则 \"A 或 B\" 为 True。</li>\n</ol>\n", "code": "/*\n// Definition for a QuadTree node.\nclass Node {\npublic:\n    bool val;\n    bool isLeaf;\n    Node* topLeft;\n    Node* topRight;\n    Node* bottomLeft;\n    Node* bottomRight;\n     Node() {}\n     Node(bool _val, bool _isLeaf, Node* _topLeft, Node* _topRight, Node* \n_bottomLeft, Node* _bottomRight) {\n        val = _val;\n        isLeaf = _isLeaf;\n        topLeft = _topLeft;\n        topRight = _topRight;\n        bottomLeft = _bottomLeft;\n        bottomRight = _bottomRight;\n    }\n};"}