{"title": "652. 寻找重复的子树", "level": "中等", "description": "<p>给定一棵二叉树，返回所有重复的子树。对于同一类的重复子树，你只需要返回其中任意<strong>一棵</strong>的根结点即可。</p>\n\n<p>两棵树重复是指它们具有相同的结构以及相同的结点值。</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>        1\n       / \\\n      2   3\n     /   / \\\n    4   2   4\n       /\n      4\n</pre>\n\n<p>下面是两个重复的子树：</p>\n\n<pre>      2\n     /\n    4\n</pre>\n\n<p>和</p>\n\n<pre>    4\n</pre>\n\n<p>因此，你需要以列表的形式返回上述重复子树的根结点。</p>\n", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {\n            }\n};"}