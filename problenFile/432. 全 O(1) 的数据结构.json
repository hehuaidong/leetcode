{"title": "432. 全 O(1) 的数据结构", "level": "困难", "description": "<p>实现一个数据结构支持以下操作：</p>\n\n<ol>\n\t<li>Inc(key) - 插入一个新的值为 1 的 key。或者使一个存在的 key 增加一，保证 key 不为空字符串。</li>\n\t<li>Dec(key) - 如果这个 key 的值是 1，那么把他从数据结构中移除掉。否者使一个存在的 key 值减一。如果这个 key 不存在，这个函数不做任何事情。key 保证不为空字符串。</li>\n\t<li>GetMaxKey() - 返回 key 中值最大的任意一个。如果没有元素存在，返回一个空字符串<code>\"\"</code>。</li>\n\t<li>GetMinKey() - 返回 key 中值最小的任意一个。如果没有元素存在，返回一个空字符串<code>\"\"</code>。</li>\n</ol>\n\n<p>挑战：以 O(1) 的时间复杂度实现所有操作。</p>\n", "code": "class AllOne {\npublic:\n    /** Initialize your data structure here. */\n    AllOne() {\n            }\n        /** Inserts a new key <Key> with value 1. Or increments an existing key by \n1. */\n    void inc(string key) {\n            }\n        /** Decrements an existing key by 1. If Key's value is 1, remove it from \nthe data structure. */\n    void dec(string key) {\n            }\n        /** Returns one of the keys with maximal value. */\n    string getMaxKey() {\n            }"}