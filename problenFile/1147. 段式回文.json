{"title": "1147. 段式回文", "level": "困难", "description": "<p>段式回文 其实与 一般回文 类似，只不过是最小的单位是 一段字符&nbsp;而不是 单个字母。</p>\n\n<p>举个例子，对于一般回文 \"<code>abcba</code>\" 是回文，而 \"<code>volvo</code>\" 不是，但如果我们把&nbsp;\"<code>volvo</code>\" 分为 \"<code>vo</code>\"、\"<code>l</code>\"、\"<code>vo</code>\" 三段，则可以认为 “<code>(vo)(l)(vo)</code>” 是段式回文（分为 3 段）。</p>\n\n<p>&nbsp;</p>\n\n<p>给你一个字符串&nbsp;<code>text</code>，在确保它满足段式回文的前提下，请你返回 <strong>段</strong> 的&nbsp;<strong>最大数量</strong>&nbsp;<code>k</code>。</p>\n\n<p>如果段的最大数量为&nbsp;<code>k</code>，那么存在满足以下条件的&nbsp;<code>a_1, a_2, ..., a_k</code>：</p>\n\n<ul>\n\t<li>每个&nbsp;<code>a_i</code>&nbsp;都是一个非空字符串；</li>\n\t<li>将这些字符串首位相连的结果&nbsp;<code>a_1 + a_2 + ... + a_k</code>&nbsp;和原始字符串&nbsp;<code>text</code>&nbsp;相同；</li>\n\t<li>对于所有<code>1 &lt;= i &lt;= k</code>，都有&nbsp;<code>a_i = a_{k+1 - i}</code>。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>text = \"ghiabcdefhelloadamhelloabcdefghi\"\n<strong>输出：</strong>7\n<strong>解释：</strong>我们可以把字符串拆分成 \"(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)\"。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>text = \"merchant\"\n<strong>输出：</strong>1\n<strong>解释：</strong>我们可以把字符串拆分成 \"(merchant)\"。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>text = \"antaprezatepzapreanta\"\n<strong>输出：</strong>11\n<strong>解释：</strong>我们可以把字符串拆分成 \"(a)(nt)(a)(pre)(za)(tpe)(za)(pre)(a)(nt)(a)\"。\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>text = \"aaa\"\n<strong>输出：</strong>3\n<strong>解释：</strong>我们可以把字符串拆分成 \"(a)(a)(a)\"。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>text</code>&nbsp;仅由小写英文字符组成。</li>\n\t<li><code>1 &lt;= text.length &lt;= 1000</code></li>\n</ul>\n", "code": "class Solution {\npublic:\n    int longestDecomposition(string text) {\n            }\n};"}