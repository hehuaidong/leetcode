{"title": "843. 猜猜这个单词", "level": "困难", "description": "<p>这个问题是 LeetCode 平台新增的<strong><em>交互式问题 </em></strong>。</p>\n\n<p>我们给出了一个由一些独特的单词组成的单词列表，每个单词都是 6 个字母长，并且这个列表中的一个单词将被选作<strong>秘密</strong>。</p>\n\n<p>你可以调用 <code>master.guess(word)</code> 来猜单词。你所猜的单词应当是存在于原列表并且由 6 个小写字母组成的类型<code>字符串</code>。</p>\n\n<p>此函数将会返回一个<code>整型数字</code>，表示你的猜测与<strong>秘密单词</strong>的准确匹配（值和位置同时匹配）的数目。此外，如果你的猜测不在给定的单词列表中，它将返回 <code>-1</code>。</p>\n\n<p>对于每个测试用例，你有 10 次机会来猜出这个单词。当所有调用都结束时，如果您对 <code>master.guess</code> 的调用不超过 10 次，并且至少有一次猜到<strong>秘密</strong>，那么您将通过该测试用例。</p>\n\n<p>除了下面示例给出的测试用例外，还会有 5 个额外的测试用例，每个单词列表中将会有 100 个单词。这些测试用例中的每个单词的字母都是从 <code>'a'</code> 到 <code>'z'</code>&nbsp;中随机选取的，并且保证给定单词列表中的每个单词都是唯一的。</p>\n\n<pre><strong>示例 1:</strong>\n<strong>输入:</strong>&nbsp;secret = \"acckzz\", wordlist = [\"acckzz\",\"ccbazz\",\"eiowzz\",\"abcczz\"]\n\n<strong>解释:</strong>\n\n<code>master.guess(\"aaaaaa\")</code> 返回 -1, 因为&nbsp;<code>\"aaaaaa\"</code>&nbsp;不在 wordlist 中.\n<code>master.guess(\"acckzz\") 返回</code> 6, 因为&nbsp;<code>\"acckzz\"</code> 就是<strong>秘密</strong>，6个字母完全匹配。\n<code>master.guess(\"ccbazz\")</code> 返回 3, 因为<code>&nbsp;\"ccbazz\"</code>&nbsp;有 3 个匹配项。\n<code>master.guess(\"eiowzz\")</code> 返回 2, 因为&nbsp;<code>\"eiowzz\"</code>&nbsp;有 2 个匹配项。\n<code>master.guess(\"abcczz\")</code> 返回 4, 因为&nbsp;<code>\"abcczz\"</code> 有 4 个匹配项。\n\n我们调用了 5 次master.guess，其中一次猜到了<strong>秘密</strong>，所以我们通过了这个测试用例。\n</pre>\n\n<p><strong>提示：</strong>任何试图绕过评判的解决方案都将导致比赛资格被取消。</p>\n", "code": "/**\n * // This is the Master's API interface.\n * // You should not implement it, or speculate about its implementation\n * class Master {\n *   public:\n *     int guess(string word);\n * };\n */\nclass Solution {\npublic:\n    void findSecretWord(vector<string>& wordlist, Master& master) {\n            }\n};"}