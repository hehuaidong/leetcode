{"title": "147. 对链表进行插入排序", "level": "中等", "description": "<p>对链表进行插入排序。</p>\n\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/0/0f/Insertion-sort-example-300px.gif\" alt=\"\"><br>\n<small>插入排序的动画演示如上。从第一个元素开始，该链表可以被认为已经部分排序（用黑色表示）。<br>\n每次迭代时，从输入数据中移除一个元素（用红色表示），并原地将其插入到已排好序的链表中。</small></p>\n\n<p>&nbsp;</p>\n\n<p><strong>插入排序算法：</strong></p>\n\n<ol>\n\t<li>插入排序是迭代的，每次只移动一个元素，直到所有元素可以形成一个有序的输出列表。</li>\n\t<li>每次迭代中，插入排序只从输入数据中移除一个待排序的元素，找到它在序列中适当的位置，并将其插入。</li>\n\t<li>重复直到所有输入数据插入完为止。</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入:</strong> 4-&gt;2-&gt;1-&gt;3\n<strong>输出:</strong> 1-&gt;2-&gt;3-&gt;4\n</pre>\n\n<p><strong>示例&nbsp;2：</strong></p>\n\n<pre><strong>输入:</strong> -1-&gt;5-&gt;3-&gt;4-&gt;0\n<strong>输出:</strong> -1-&gt;0-&gt;3-&gt;4-&gt;5\n</pre>\n", "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* insertionSortList(ListNode* head) {\n            }\n};"}