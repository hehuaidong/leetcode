{"title": "783. 二叉搜索树结点最小距离", "level": "简单", "description": "<p>给定一个二叉搜索树的根结点&nbsp;<code>root</code>, 返回树中任意两节点的差的最小值。</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入:</strong> root = [4,2,6,1,3,null,null]\n<strong>输出:</strong> 1\n<strong>解释:</strong>\n注意，root是树结点对象(TreeNode object)，而不是数组。\n\n给定的树 [4,2,6,1,3,null,null] 可表示为下图:\n\n          4\n        /   \\\n      2      6\n     / \\    \n    1   3  \n\n最小的差值是 1, 它是节点1和节点2的差值, 也是节点3和节点2的差值。</pre>\n\n<p><strong>注意：</strong></p>\n\n<ol>\n\t<li>二叉树的大小范围在 <code>2</code> 到&nbsp;<code>100</code>。</li>\n\t<li>二叉树总是有效的，每个节点的值都是整数，且不重复。</li>\n</ol>\n", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int minDiffInBST(TreeNode* root) {\n            }\n};"}