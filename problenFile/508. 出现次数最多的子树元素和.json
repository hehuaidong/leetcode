{"title": "508. 出现次数最多的子树元素和", "level": "中等", "description": "<p>给出二叉树的根，找出出现次数最多的子树元素和。一个结点的子树元素和定义为以该结点为根的二叉树上所有结点的元素之和（包括结点本身）。然后求出出现次数最多的子树元素和。如果有多个元素出现的次数相同，返回所有出现次数最多的元素（不限顺序）。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1</strong><br>\n输入:</p>\n\n<pre>  5\n /  \\\n2   -3\n</pre>\n\n<p>返回&nbsp;[2, -3, 4]，所有的值均只出现一次，以任意顺序返回所有值。</p>\n\n<p><strong>示例&nbsp;2</strong><br>\n输入:</p>\n\n<pre>  5\n /  \\\n2   -5\n</pre>\n\n<p>返回&nbsp;[2]，只有 2 出现两次，-5 只出现 1 次。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong>&nbsp;假设任意子树元素和均可以用 32 位有符号整数表示。</p>\n", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> findFrequentTreeSum(TreeNode* root) {\n            }\n};"}