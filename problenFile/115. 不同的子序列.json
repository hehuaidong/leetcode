{"title": "115. 不同的子序列", "level": "困难", "description": "<p>给定一个字符串&nbsp;<strong>S&nbsp;</strong>和一个字符串&nbsp;<strong>T</strong>，计算在 <strong>S</strong> 的子序列中 <strong>T</strong> 出现的个数。</p>\n\n<p>一个字符串的一个子序列是指，通过删除一些（也可以不删除）字符且不干扰剩余字符相对位置所组成的新字符串。（例如，<code>\"ACE\"</code>&nbsp;是&nbsp;<code>\"ABCDE\"</code>&nbsp;的一个子序列，而&nbsp;<code>\"AEC\"</code>&nbsp;不是）</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre><strong>输入: </strong>S = <code>\"rabbbit\"</code>, T = <code>\"rabbit\"\n<strong>输出:</strong>&nbsp;3\n</code><strong>解释:\n</strong>\n如下图所示, 有 3 种可以从 S 中得到 <code>\"rabbit\" 的方案</code>。\n(上箭头符号 ^ 表示选取的字母)\n\n<code>rabbbit</code>\n^^^^ ^^\n<code>rabbbit</code>\n^^ ^^^^\n<code>rabbbit</code>\n^^^ ^^^\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre><strong>输入: </strong>S = <code>\"babgbag\"</code>, T = <code>\"bag\"\n<strong>输出:</strong>&nbsp;5\n</code><strong>解释:\n</strong>\n如下图所示, 有 5 种可以从 S 中得到 <code>\"bag\" 的方案</code>。 \n(上箭头符号 ^ 表示选取的字母)\n\n<code>babgbag</code>\n^^ ^\n<code>babgbag</code>\n^^    ^\n<code>babgbag</code>\n^    ^^\n<code>babgbag</code>\n  ^  ^^\n<code>babgbag</code>\n    ^^^</pre>\n", "code": "class Solution {\npublic:\n    int numDistinct(string s, string t) {\n            }\n};"}