{"title": "385. 迷你语法分析器", "level": "中等", "description": "<p>给定一个用字符串表示的整数的嵌套列表，实现一个解析它的语法分析器。</p>\n\n<p>列表中的每个元素只可能是整数或整数嵌套列表</p>\n\n<p><strong>提示：</strong>你可以假定这些字符串都是格式良好的：</p>\n\n<ul>\n\t<li>字符串非空</li>\n\t<li>字符串不包含空格</li>\n\t<li>字符串只包含数字<code>0-9</code>, <code>[</code>, <code>-</code> <code>,</code>, <code>]</code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>给定 s = \"324\",\n\n你应该返回一个 NestedInteger 对象，其中只包含整数值 324。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>给定 s = \"[123,[456,[789]]]\",\n\n返回一个 NestedInteger 对象包含一个有两个元素的嵌套列表：\n\n1. 一个 integer 包含值 123\n2. 一个包含两个元素的嵌套列表：\n    i.  一个 integer 包含值 456\n    ii. 一个包含一个元素的嵌套列表\n         a. 一个 integer 包含值 789\n</pre>\n\n<p>&nbsp;</p>\n", "code": "/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *   public:\n *     // Constructor initializes an empty nested list.\n *     NestedInteger();\n *\n *     // Constructor initializes a single integer.\n *     NestedInteger(int value);\n *\n *     // Return true if this NestedInteger holds a single integer, rather than \na nested list.\n *     bool isInteger() const;\n *\n *     // Return the single integer that this NestedInteger holds, if it holds \na single integer\n *     // The result is undefined if this NestedInteger holds a nested list\n *     int getInteger() const;\n *\n *     // Set this NestedInteger to hold a single integer.\n *     void setInteger(int value);\n *"}