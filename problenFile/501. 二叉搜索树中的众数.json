{"title": "501. 二叉搜索树中的众数", "level": "简单", "description": "<p>给定一个有相同值的二叉搜索树（BST），找出 BST 中的所有众数（出现频率最高的元素）。</p>\n\n<p>假定 BST 有如下定义：</p>\n\n<ul>\n\t<li>结点左子树中所含结点的值小于等于当前结点的值</li>\n\t<li>结点右子树中所含结点的值大于等于当前结点的值</li>\n\t<li>左子树和右子树都是二叉搜索树</li>\n</ul>\n\n<p>例如：<br>\n给定 BST <code>[1,null,2,2]</code>,</p>\n\n<pre>   1\n    \\\n     2\n    /\n   2\n</pre>\n\n<p><code>返回[2]</code>.</p>\n\n<p><strong>提示</strong>：如果众数超过1个，不需考虑输出顺序</p>\n\n<p><strong>进阶：</strong>你可以不使用额外的空间吗？（假设由递归产生的隐式调用栈的开销不被计算在内）</p>\n", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> findMode(TreeNode* root) {\n            }\n};"}