{"title": "1332. 删除回文子序列", "level": "简单", "description": "<p>给你一个字符串&nbsp;<code>s</code>，它仅由字母&nbsp;<code>'a'</code> 和 <code>'b'</code>&nbsp;组成。每一次删除操作都可以从 <code>s</code> 中删除一个回文 <strong>子序列</strong>。</p>\n\n<p>返回删除给定字符串中所有字符（字符串为空）的最小删除次数。</p>\n\n<p>「子序列」定义：如果一个字符串可以通过删除原字符串某些字符而不改变原字符顺序得到，那么这个字符串就是原字符串的一个子序列。</p>\n\n<p>「回文」定义：如果一个字符串向后和向前读是一致的，那么这个字符串就是一个回文。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>s = \"ababa\"\n<strong>输出：</strong>1\n<strong>解释：</strong>字符串本身就是回文序列，只需要删除一次。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>s = \"abb\"\n<strong>输出：</strong>2\n<strong>解释：</strong>\"<strong>a</strong>bb\" -&gt; \"<strong>bb</strong>\" -&gt; \"\". \n先删除回文子序列 \"a\"，然后再删除 \"bb\"。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>s = \"baabb\"\n<strong>输出：</strong>2\n<strong>解释：</strong>\"<strong>baa</strong>b<strong>b</strong>\" -&gt; \"b\" -&gt; \"\". \n先删除回文子序列 \"baab\"，然后再删除 \"b\"。\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>s = \"\"\n<strong>输出：</strong>0\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> 仅包含字母&nbsp;'a'&nbsp; 和 'b'</li>\n</ul>\n", "code": "class Solution {\npublic:\n    int removePalindromeSub(string s) {\n            }\n};"}