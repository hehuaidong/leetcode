{"title": "117. 填充每个节点的下一个右侧节点指针 II", "level": "中等", "description": "<p>给定一个二叉树</p>\n\n<pre>struct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}</pre>\n\n<p>填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 <code>NULL</code>。</p>\n\n<p>初始状态下，所有&nbsp;next 指针都被设置为 <code>NULL</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶：</strong></p>\n\n<ul>\n\t<li>你只能使用常量级额外空间。</li>\n\t<li>使用递归解题也符合要求，本题中递归程序占用的栈空间不算做额外的空间复杂度。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<p><img style=\"height: 218px; width: 640px;\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/15/117_sample.png\" alt=\"\"></p>\n\n<pre><strong>输入</strong>：root = [1,2,3,4,5,null,7]\n<strong>输出：</strong>[1,#,2,3,#,4,5,7,#]\n<strong>解释：</strong>给定二叉树如图 A 所示，你的函数应该填充它的每个 next 指针，以指向其下一个右侧节点，如图 B 所示。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>树中的节点数小于 <code>6000</code></li>\n\t<li><code>-100&nbsp;&lt;= node.val &lt;= 100</code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<ul>\n</ul>\n", "code": "/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* left;\n    Node* right;\n    Node* next;\n     Node() : val(0), left(NULL), right(NULL), next(NULL) {}\n     Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}\n     Node(int _val, Node* _left, Node* _right, Node* _next)\n        : val(_val), left(_left), right(_right), next(_next) {}\n};\n*/\nclass Solution {\npublic:\n    Node* connect(Node* root) {\n            }\n};"}