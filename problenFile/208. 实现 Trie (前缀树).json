{"title": "208. 实现 Trie (前缀树)", "level": "中等", "description": "<p>实现一个 Trie (前缀树)，包含&nbsp;<code>insert</code>,&nbsp;<code>search</code>, 和&nbsp;<code>startsWith</code>&nbsp;这三个操作。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre>Trie trie = new Trie();\n\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // 返回 true\ntrie.search(\"app\");     // 返回 false\ntrie.startsWith(\"app\"); // 返回 true\ntrie.insert(\"app\");   \ntrie.search(\"app\");     // 返回 true</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li>你可以假设所有的输入都是由小写字母&nbsp;<code>a-z</code>&nbsp;构成的。</li>\n\t<li>保证所有输入均为非空字符串。</li>\n</ul>\n", "code": "class Trie {\npublic:\n    /** Initialize your data structure here. */\n    Trie() {\n            }\n        /** Inserts a word into the trie. */\n    void insert(string word) {\n            }\n        /** Returns if the word is in the trie. */\n    bool search(string word) {\n            }\n        /** Returns if there is any word in the trie that starts with the given \nprefix. */\n    bool startsWith(string prefix) {\n            }\n};"}