{"title": "701. 二叉搜索树中的插入操作", "level": "中等", "description": "<p>给定二叉搜索树（BST）的根节点和要插入树中的值，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 保证原始二叉搜索树中不存在新值。</p>\n\n<p>注意，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回任意有效的结果。</p>\n\n<p>例如,&nbsp;</p>\n\n<pre>给定二叉搜索树:\n\n        4\n       / \\\n      2   7\n     / \\\n    1   3\n\n和 插入的值: 5\n</pre>\n\n<p>你可以返回这个二叉搜索树:</p>\n\n<pre>         4\n       /   \\\n      2     7\n     / \\   /\n    1   3 5\n</pre>\n\n<p>或者这个树也是有效的:</p>\n\n<pre>         5\n       /   \\\n      2     7\n     / \\   \n    1   3\n         \\\n          4\n</pre>\n", "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* insertIntoBST(TreeNode* root, int val) {\n            }\n};"}